5.1 Архітектура системи


Концептуальне моделювання предметної області є важливим етапом в процесі розробки інформаційної системи. Воно дозволяє зрозуміти основні сутності, процеси та взаємозв'язки між ними в межах досліджуваної області. На цьому етапі створюється концептуальна модель, яка наочно відображає структуру системи та її функціональні можливості.
На рисунку 1.1 представлена діаграма варіантів використання (use case diagram), яка демонструє ключові функціональні можливості системи управління складом. Ця діаграма включає основні дії, які може виконувати користувач системи, а також додаткові функції, що розширюють базові операції.

 
Рисунок 5.1 – Діаграма варіантів використання.

Опис елементів діаграми:
Актор – користувач системи:
	Представлений у вигляді фігури людини в центрі діаграми.
	Це може бути адміністратор складу, який має доступ до всіх функціональних можливостей системи.
Варіанти використання:
Перегляд інформації:
	Основна функція, яка дозволяє користувачеві переглядати дані про товари, замовлення, користувачів тощо.
	Цей варіант використання розширюється (extend) додатковими можливостями, такими як сортування, фільтрація та пошук інформації.
Сортування:
Дозволяє впорядкувати інформацію за певними критеріями (наприклад, за датою, ціною, назвою).
Фільтрація:
Дозволяє відбирати інформацію за певними умовами (наприклад, тільки доступні товари, товари зі знижкою).
Пошук:
Дозволяє знаходити конкретні записи в системі за ключовими словами або іншими параметрами.
Додавання інформації:
Дозволяє користувачеві вводити нові дані в систему (наприклад, нові товари, нові замовлення).
Редагування інформації:
Дозволяє змінювати існуючі дані в системі.
Видалення інформації:
Дозволяє видаляти записи з системи.
Аналіз інформації:
Дозволяє користувачеві проводити аналітичні операції з даними, отримувати статистичну інформацію.
Розглянемо ER діаграму(див рис. 5.1)

 
Рисунок 5.2 – ER-діаграма.

На цій діаграмі ми будемо працювати з таблицею Ряди.
Розглянемо діаграму пакетів (див. рис. 5.3).

 
Рисунок 5.3 – Діаграма пакетів

На цій діаграмі звернемо увагу на зв’язок IoT та серверної частини.
5.2 Аналіз програмної реалізації


Проаналізуємо програмну реалізацію застосунку(див. Додаток А):
HTTP запит:
	Створення HTTP клієнта для відправки запиту до серверу.
	Формування URL запиту з параметром id.
	Створення HTTP запиту методу DELETE.
	Відправка запиту та обробка відповіді.
Обробка винятків:
Якщо виникає помилка під час відправки запиту, показується повідомлення з текстом помилки.
Повідомлення про успіх:
Якщо введене значення не є числом, показується повідомлення "Invalid input".
Цей код демонструє простий спосіб емуляції поведінки IoT датчика, який видаляє товар з полички. Код виконує HTTP запит до певного API, що імітує фізичну дію зняття товару з полички, що є типовим для IoT застосунків, де відправка даних на сервер триггерується певною подією.

 
ДОДАТОК А
Функції IoT частини


1.	private void Button_Click(object sender, RoutedEventArgs e)
2.	{
3.	var text = input.Text;

4.	if (int.TryParse(text, out var id))
5.	{
6.	using (var client = new HttpClient())
7.	{
8.	string url = "https://localhost:44389/Rows/TakeProduct?id=" + id;
9.	var request = new HttpRequestMessage(new HttpMethod("DELETE"), url);

10.	try
11.	{
12.	var response = client.SendAsync(request).Result;
13.	}
14.	catch (Exception ex)
15.	{
16.	MessageBox.Show("Error. Message: " + ex.Message);
17.	}
18.	}
19.	}
20.	else
21.	{
22.	MessageBox.Show("Success");
23.	}
24.	}

