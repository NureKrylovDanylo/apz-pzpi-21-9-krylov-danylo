4 РОЗРОБКА КЛІЄНТСЬКОЇ ЧАСТИНИ
4.1 Архітектура системи


Загальний огляд
Система управління складом побудована з використанням сучасних веб-технологій, що забезпечує високий рівень продуктивності, масштабованості та зручності в експлуатації. Основними компонентами системи є фронтенд, реалізований за допомогою React та TypeScript, і бекенд, побудований на основі ASP.NET Core з використанням Entity Framework Core для взаємодії з базою даних.
Фронтенд
Фронтенд системи розроблений з використанням React та TypeScript. Це забезпечує динамічний та інтерактивний користувацький інтерфейс, який легко підтримується і розширюється.
Основні компоненти фронтенду:
Компонентний підхід:
React: Використовується для побудови компонентів інтерфейсу, що дозволяє повторно використовувати код та спрощує підтримку.
TypeScript: Забезпечує статичну типізацію, що дозволяє виявляти помилки на етапі розробки та покращує читабельність і підтримку коду.
Стан управління:
Redux або Context API: Використовуються для управління станом додатку, що забезпечує єдиний стан для всіх компонентів і спрощує обробку складної логіки.
Маршрутизація:

React Router: Забезпечує навігацію між різними сторінками додатку, підтримуючи як клієнтську, так і серверну маршрутизацію.
HTTP-запити:
Axios або Fetch API: Використовуються для взаємодії з бекендом через API, забезпечуючи асинхронні запити для отримання та відправки даних.
Інтерфейс користувача (UI):
CSS-in-JS або інші CSS-фреймворки: Використовуються для стилізації компонентів, що забезпечує адаптивність та зручність у використанні.
На рисунку 1.1 представлена діаграма варіантів використання (use case diagram), яка демонструє ключові функціональні можливості системи управління складом. Ця діаграма включає основні дії, які може виконувати користувач системи, а також додаткові функції, що розширюють базові операції.

 
Рисунок 1.1 – Діаграма варіантів використання.

Структура сутностей.
На рисунку 1.2 представлена ER-діаграма, яка відображає структуру бази даних системи управління складом. Кожна сутність в діаграмі представляє таблицю в базі даних, а атрибути сутностей відповідають стовпцям цих таблиць.

 
Рисунок 1.2 – ER-діаграма.

Наведемо структуру проекту на діаграмі пакетів (див. рис. 1.3).

 
Рисунок 1.3 – Діаграма пакетів

На наведених діаграмах можна побачити структуру системи та структуру поведінки користувача на сайті.
 
4.2 Опис інтерфейсу


Опис інтерфейсу
Інтерфейс системи управління складом розроблений для забезпечення інтуїтивної та зручної роботи користувачів з різними функціями системи. Для кожного контролеру створено окрему сторінку, яка дозволяє виконувати CRUD-операції з відповідними даними.
Структура інтерфейсу
Cards
Сторінка для карток: Відображає список карток, дозволяє додавати, редагувати та видаляти картки.
Основні компоненти:
Список карток: відображає всі доступні картки.
Форма додавання/редагування картки: забезпечує введення даних для створення або оновлення картки.
Кнопки дій: дозволяють редагувати або видаляти картку.
Categories
Сторінка для категорій: Відображає список категорій, дозволяє додавати, редагувати та видаляти категорії.
Основні компоненти:
Список категорій: відображає всі доступні категорії.
Форма додавання/редагування категорії: забезпечує введення даних для створення або оновлення категорії.
Кнопки дій: дозволяють редагувати або видаляти категорію.
DeliveryMethodProducts
Сторінка для продуктів методів доставки: Відображає список продуктів методів доставки, дозволяє додавати, редагувати та видаляти продукти методів доставки.
Основні компоненти:
Список продуктів: відображає всі доступні продукти методів доставки.
Форма додавання/редагування продукту: забезпечує введення даних для створення або оновлення продукту.
Кнопки дій: дозволяють редагувати або видаляти продукт.
DeliveryMethods
Сторінка для методів доставки: Відображає список методів доставки, дозволяє додавати, редагувати та видаляти методи доставки.
Основні компоненти:
Список методів: відображає всі доступні методи доставки.
Форма додавання/редагування методу: забезпечує введення даних для створення або оновлення методу доставки.
Кнопки дій: дозволяють редагувати або видаляти метод доставки.
ProductCategories
Сторінка для категорій продуктів: Відображає список категорій продуктів, дозволяє додавати, редагувати та видаляти категорії продуктів.
Основні компоненти:
Список категорій продуктів: відображає всі доступні категорії продуктів.
Форма додавання/редагування категорії продукту: забезпечує введення даних для створення або оновлення категорії продукту.
Кнопки дій: дозволяють редагувати або видаляти категорію продукту.
Products
Сторінка для продуктів: Відображає список продуктів, дозволяє додавати, редагувати та видаляти продукти.
Основні компоненти:
Список продуктів: відображає всі доступні продукти.
Форма додавання/редагування продукту: забезпечує введення даних для створення або оновлення продукту.
Кнопки дій: дозволяють редагувати або видаляти продукт.
Rows
Сторінка для рядів: Відображає список рядів, дозволяє додавати, редагувати та видаляти ряди.
Основні компоненти:
Список рядів: відображає всі доступні ряди.
Форма додавання/редагування ряду: забезпечує введення даних для створення або оновлення ряду.
Кнопки дій: дозволяють редагувати або видаляти ряд.
ShopCards
Сторінка для магазинних карток: Відображає список магазинних карток, дозволяє додавати, редагувати та видаляти магазинні картки.
Основні компоненти:
Список магазинних карток: відображає всі доступні магазинні картки.
Форма додавання/редагування картки: забезпечує введення даних для створення або оновлення картки.
Кнопки дій: дозволяють редагувати або видаляти картку.
Users
Сторінка для користувачів: Відображає список користувачів, дозволяє додавати, редагувати та видаляти користувачів.
Основні компоненти:
Список користувачів: відображає всі доступні користувачі.
Форма додавання/редагування користувача: забезпечує введення даних для створення або оновлення користувача.
Кнопки дій: дозволяють редагувати або видаляти користувача.
Створення сторінок
Для створення сторінок використовуються компоненти React. Кожна сторінка складається з кількох основних компонентів:
Компоненти списку: Компоненти, що відповідають за відображення списку об'єктів (наприклад, карток, категорій тощо).

Форми: Компоненти, що забезпечують введення даних для створення або редагування об'єктів.
Кнопки дій: Елементи інтерфейсу, що дозволяють виконувати різні дії, такі як створення, редагування або видалення об'єктів.
Маршрутизація: Використання React Router для навігації між різними сторінками додатку.
Зв'язок з API: Використання бібліотек Axios або Fetch API для відправки HTTP-запитів до бекенду та обробки відповідей.
Цей підхід забезпечує модульність, що дозволяє легко підтримувати та розширювати систему управління складом.


4.3	 Використані технології


React
Бібліотека для побудови користувацьких інтерфейсів. Забезпечує компонентний підхід, що спрощує розробку та підтримку додатку.
TypeScript
Надбудова над JavaScript, що додає статичну типізацію. Покращує читабельність коду та допомагає уникати помилок на етапі розробки.
Redux або Context API
Інструменти для управління станом додатку. Дозволяють зберігати та управляти глобальним станом додатку централізовано.
React Router
Бібліотека для реалізації маршрутизації в додатках React. Дозволяє створювати багатосторінкові додатки з клієнтською навігацією.
Axios або Fetch API
Інструменти для виконання HTTP-запитів. Використовуються для взаємодії з серверною частиною через RESTful API.
CSS-in-JS або CSS фреймворки (наприклад, Bootstrap, Tailwind CSS)
Інструменти для стилізації компонентів. Забезпечують адаптивний та зручний дизайн інтерфейсу.
 
ВИСНОВКИ


Розробка фронтенд частини системи управління складом, побудованої на основі React та TypeScript, забезпечила створення сучасного, зручного та інтерактивного інтерфейсу користувача. Завдяки компонентному підходу React, вдалося досягти високого рівня модульності, що спрощує підтримку та розширення функціональності додатку. Використання TypeScript додало статичну типізацію, що підвищило надійність та якість коду.
Основні досягнення:
Компонентність: Кожна сторінка реалізована як набір компонентів, що дозволяє повторно використовувати код та забезпечує гнучкість при розробці нових функцій.
Управління станом: Впровадження Redux або Context API забезпечило централізоване управління станом додатку, що спрощує обробку складної логіки та покращує продуктивність.
Маршрутизація: Використання React Router дозволило створити багатосторінковий додаток з плавною навігацією між різними розділами системи.
Асинхронна взаємодія з API: Використання Axios або Fetch API забезпечило ефективну взаємодію з бекендом, що дозволяє отримувати та відправляти дані без перезавантаження сторінок.
Адаптивний дизайн: Використання CSS-фреймворків, таких як Bootstrap або Tailwind CSS, забезпечило адаптивність інтерфейсу для різних типів пристроїв, що покращує користувацький досвід.
Фронтенд частина системи управління складом відповідає сучасним стандартам веб-розробки та забезпечує високу продуктивність, зручність у використанні та легкість підтримки. Інтеграція з бекендом через RESTful API дозволяє ефективно управляти складськими операціями, що робить систему надійним інструментом для користувачів. 
ДОДАТОК А
Функції клієнтської частини


1	import React, { useEffect, useState } from 'react';
2	import axios from 'axios';
3	
4	interface Card {
5	  cardId: number;
6	  dateAdded: string;
7	  shopCardId: number;
8	  productId: number;
9	  quantity: number;
10	  productTitle: string;
11	}
12	
13	const CardsPage: React.FC = () => {
14	  const [cards, setCards] = useState<Card[]>([]);
15	  const [loading, setLoading] = useState<boolean>(true);
16	  const [error, setError] = useState<string | null>(null);
17	
18	  useEffect(() => {
19	    const fetchCards = async () => {
20	      try {
21	        const response = await axios.get('/api/Cards');
22	        setCards(response.data);
23	        setLoading(false);
24	      } catch (err) {
25	        setError('Error fetching cards');
26	        setLoading(false);
27	      }
28	    };
29	
30	    fetchCards();
31	  }, []);
32	
33	  if (loading) return <div>Loading...</div>;
34	  if (error) return <div>{error}</div>;
35	
36	  return (
37	    <div>
38	      <h1>Cards</h1>
39	      <table>
40	        <thead>
41	          <tr>
42	            <th>ID</th>
43	            <th>Date Added</th>
44	            <th>Shop Card ID</th>
45	            <th>Product ID</th>
46	            <th>Quantity</th>
47	            <th>Product Title</th>
48	          </tr>
49	        </thead>
50	        <tbody>
51	          {cards.map((card) => (
52	            <tr key={card.cardId}>
53	              <td>{card.cardId}</td>
54	              <td>{new Date(card.dateAdded).toLocaleDateString()}</td>
55	              <td>{card.shopCardId}</td>
56	              <td>{card.productId}</td>
57	              <td>{card.quantity}</td>
58	              <td>{card.productTitle}</td>
59	            </tr>
60	          ))}
61	        </tbody>
62	      </table>
63	    </div>
64	  );
65	};
66	
67	export default CardsPage;
